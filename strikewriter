#!/usr/bin/python

#################################################################################
# Import some libraries and modules:
#################################################################################

import argparse, sys, re, requests, json
from netaddr import IPNetwork, IPAddress

#################################################################################
# EDIT the below three lines for your personal API keys:
#################################################################################

ABUSEIPDBKEY = ''
VIRUSTOTALKEY = ''
IPINFOKEY = ''

#################################################################################
# Main code:
#################################################################################

def main():
    # Check the user entered in their API Keys above:
    if ABUSEIPDBKEY == '':
        print '\n[!] Error: Ensure all API Keys are added!\n'
        sys.exit(0)
        
    elif VIRUSTOTALKEY == '' or IPINFOKEY == '':
        print '\n[!] Error: Ensure all API Keys are added.\n'
        sys.exit (0)
        
    else:
        # Parser for the -i argument for IP input from the user:
        parser = argparse.ArgumentParser()
        parser.add_argument("-i","--ip", help="Input IPV4 Address.",required=True)
        args = parser.parse_args()
        
        # Store the input as a variable:
        ip = args.ip
        
        # See if it's an IP address or a random input:
        if re.match(r'^((\d{1,2}|1\d{2}|2[0-4]\d|25[0-5])\.){3}(\d{1,2}|1\d{2}|2[0-4]\d|25[0-5])$', ip):
            pass
        else:
            print '\n[!] Error: Unknown Character Detected!\n'
            sys.exit (0)
            
        # Determine if it's a private IP address: 
        if IPAddress(ip) in IPNetwork('192.168.0.0/16'):
            print '\n[!] Error: Private IP Detected!\n'
            sys.exit (0)
        elif IPAddress(ip) in IPNetwork('10.0.0.0/8') or IPAddress(ip) in IPNetwork('127.0.0.0/8') or IPAddress(ip) in IPNetwork('172.16.0.0/12'):
            print '\n[!] Error: Private IP Detected!\n'
            sys.exit (0)

#################################################################################
# IPInfo Check:
#################################################################################

        ipInfoRequest = requests.get('https://ipinfo.io/' + ip + '?token=' + IPINFOKEY)
        ipInfoResults = json.loads(ipInfoRequest.content)
        
        if 'hostname' in ipInfoResults:
            hostname = ipInfoResults['hostname']
        else: hostname = 'N/A'
        if 'org' in ipInfoResults:
            provider = ipInfoResults['org']
        else:
            provider = 'N/A'
        if 'city' in ipInfoResults:
            city = ipInfoResults['city']
        else:
            city = 'N/A'
        if 'region' in ipInfoResults:
            region = ipInfoResults['region']
        else:
            region = 'N/A'
        if 'country' in ipInfoResults:
            country = ipInfoResults['country']
        else:
            country = 'N/A'
        
        print '\n*IP Information:*'
        print '* *IP:*', ip
        print '* *Hostname:*', hostname
        print '* *Provider:*', provider
        print '* *City:*', city
        print '* *Region:*', region
        print '* *Country:*', country
        
        print '\n-----'
        print '*Blacklist Information:*'
        
#################################################################################
# Blacklist lookup:
#################################################################################

        # AbuseIPDB Check:
        try:
            abuseRequest = requests.get('https://www.abuseipdb.com/check/' + ip + '/json?key=' + ABUSEIPDBKEY + '&days=30')
            abuseResults = abuseRequest.content
            
            if abuseResults == '[]' and abuseRequest.status_code == 200:
                print '* *AbuseIPDB:* No results'
            elif abuseResults != '[]' and abuseRequest.status_code == 200:
                print '* *AbuseIPDB:* +Found!+'
                print '** Link: https://www.abuseipdb.com/check/' + ip
        except requests.ConnectionError:
            print '\n[!] Error: Could not connect to AbuseIPDB\n'
        
        # Threatcrowd Check:
        try:
            threat = False
            threatRequest = requests.get('http://www.threatcrowd.org/searchApi/v2/ip/report/', params = {'ip': ip})
            threatResults = json.loads(threatRequest.content)
            response_code = threatResults['response_code']
            
            if response_code == '1':
                threatURL = threatResults['permalink']
                threat = True
                
            if threat == True:
                print '* *Threatcrowd:* +Found!+'
                print '** *Link:*', threatURL
            else:
                print '* *Threatcrowd:* No results'   
        except requests.ConnectionError:
            print '\n[!] Error: Could not connect to ThreatCrowd\n'
        
        # Ransomware IP check:
        try:
            ransom = False
            ransomRequest = requests.get('https://ransomwaretracker.abuse.ch/ip/' + ip)
            
            if 'not found in Ransomware Tracker' in ransomRequest.content:
                pass
            elif 'table below shows all Ransomware' in ransomRequest.content:
                ransom = True
            
            if ransom == True:
                print '* *Ransomware Tracker:* +Found!+'
                print '** Link: https://ransomwaretracker.abuse.ch/ip/' + ip
            else:
                print '* *Ransomware Tracker:* No results'
        except requests.ConnectionError:
            print '[!] Error: Could not connect to Ransomware Tracker\n'
            
        # Virustotal Check:
        try:
            params = {'apikey': VIRUSTOTALKEY, 'ip': ip}
            vtip_results = requests.get('https://www.virustotal.com/vtapi/v2/ip-address/report', params=params)
            json_response = vtip_results.json()
            
            vt_code = json_response['response_code']
            if vt_code == 0:
                print '* *Virustotal:* No results'
                print '\n-----'
            elif vt_code == 1:
                print '* *Virustotal:* +Found!+'
                print '** *Link: https://www.virustotal.com/#/ip-address/' + ip
                print '-----\n'
            
        except requests.ConnectionError:
            print '[!] Error: Could not connect to Virustotal\n'
    
if __name__ == "__main__":
    main()
